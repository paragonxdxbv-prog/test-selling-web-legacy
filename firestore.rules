rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Products collection - read access for all, write access for authenticated admin
    match /products/{productId} {
      // Allow read access to all users for product browsing
      allow read: if true;
      
      // Allow write access only for authenticated admin operations
      // In production, replace with proper admin authentication
      allow write: if request.auth != null && 
        request.auth.token.admin == true;
      
      // Validate product data structure
      allow create, update: if request.resource.data.keys().hasAll(['name', 'price', 'category', 'image', 'description']) &&
        request.resource.data.name is string &&
        request.resource.data.price is string &&
        request.resource.data.category is string &&
        request.resource.data.image is string &&
        request.resource.data.description is string &&
        // Optional fields validation
        (!request.resource.data.keys().hasAny(['originalPrice']) || request.resource.data.originalPrice is string) &&
        (!request.resource.data.keys().hasAny(['discountPercentage']) || request.resource.data.discountPercentage is number) &&
        (!request.resource.data.keys().hasAny(['buyUrl']) || request.resource.data.buyUrl is string);
    }
    
    // About page content collection - admin write access only
    match /content/about {
      // Allow read access to all users
      allow read: if true;
      
      // Allow write access only for authenticated admin
      allow write: if request.auth != null && 
        request.auth.token.admin == true;
      
      // Validate about content structure
      allow create, update: if request.resource.data.keys().hasAll(['heroTitle', 'heroDescription', 'storyTitle', 'storyContent', 'missionTitle', 'missionContent']) &&
        request.resource.data.heroTitle is string &&
        request.resource.data.heroDescription is string &&
        request.resource.data.storyTitle is string &&
        request.resource.data.storyContent is list &&
        request.resource.data.missionTitle is string &&
        request.resource.data.missionContent is string;
    }
    
    // Company rules collection - admin write access only
    match /content/rules {
      // Allow read access to all users
      allow read: if true;
      
      // Allow write access only for authenticated admin
      allow write: if request.auth != null && 
        request.auth.token.admin == true;
      
      // Validate rules structure
      allow create, update: if request.resource.data.keys().hasAll(['rules']) &&
        request.resource.data.rules is list;
    }
    
    // User analytics and activity tracking
    match /analytics/{userId} {
      // Users can only read/write their own analytics data
      allow read, write: if request.auth != null && 
        request.auth.uid == userId;
      
      // Admin can read all analytics data
      allow read: if request.auth != null && 
        request.auth.token.admin == true;
    }
    
    // AI generation logs (for monitoring and cost control)
    match /ai_logs/{logId} {
      // Only authenticated users can create logs
      allow create: if request.auth != null;
      
      // Admin can read all logs
      allow read: if request.auth != null && 
        request.auth.token.admin == true;
      
      // Users can read their own logs
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // Validate log structure
      allow create: if request.resource.data.keys().hasAll(['userId', 'timestamp', 'action', 'model']) &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.timestamp is timestamp &&
        request.resource.data.action is string &&
        request.resource.data.model is string;
    }
    
    // User preferences and settings
    match /users/{userId} {
      // Users can only access their own data
      allow read, write: if request.auth != null && 
        request.auth.uid == userId;
      
      // Admin can read all user data (for support purposes)
      allow read: if request.auth != null && 
        request.auth.token.admin == true;
      
      // Validate user data structure
      allow create, update: if request.resource.data.keys().hasAll(['email', 'createdAt']) &&
        request.resource.data.email is string &&
        request.resource.data.createdAt is timestamp;
    }
    
    // Shopping cart data (temporary storage)
    match /carts/{userId} {
      // Users can only access their own cart
      allow read, write: if request.auth != null && 
        request.auth.uid == userId;
      
      // Cart data expires after 30 days
      allow read, write: if request.auth != null && 
        request.auth.uid == userId &&
        resource.data.updatedAt > timestamp.date(2024, 1, 1);
    }
    
    // Product reviews and ratings
    match /reviews/{reviewId} {
      // Anyone can read reviews
      allow read: if true;
      
      // Only authenticated users can write reviews
      allow create: if request.auth != null &&
        request.resource.data.userId == request.auth.uid;
      
      // Users can update/delete their own reviews
      allow update, delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // Admin can moderate all reviews
      allow update, delete: if request.auth != null && 
        request.auth.token.admin == true;
      
      // Validate review structure
      allow create, update: if request.resource.data.keys().hasAll(['userId', 'productId', 'rating', 'comment', 'timestamp']) &&
        request.resource.data.userId is string &&
        request.resource.data.productId is string &&
        request.resource.data.rating is number &&
        request.resource.data.rating >= 1 &&
        request.resource.data.rating <= 5 &&
        request.resource.data.comment is string &&
        request.resource.data.timestamp is timestamp;
    }
    
    // Admin activity logs
    match /admin_logs/{logId} {
      // Only admin can read admin logs
      allow read: if request.auth != null && 
        request.auth.token.admin == true;
      
      // System can create admin logs
      allow create: if true;
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
